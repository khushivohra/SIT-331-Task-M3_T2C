#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <mpi.h>

#define DIMENSION 2
#define MAX_ITERATIONS 100

typedef struct {
    double coords[DIMENSION];
} Point;

double distance_squared(Point p1, Point p2) {
    double sum = 0;
    for (int i = 0; i < DIMENSION; i++) {
        double diff = p1.coords[i] - p2.coords[i];
        sum += diff * diff;
    }
    return sum;
}

void assign_clusters(Point* points, int num_points, Point* centroids, int num_centroids, int* assignments) {
    for (int i = 0; i < num_points; i++) {
        double min_distance = INFINITY;
        int cluster_index = -1;
        for (int j = 0; j < num_centroids; j++) {
            double dist = distance_squared(points[i], centroids[j]);
            if (dist < min_distance) {
                min_distance = dist;
                cluster_index = j;
            }
        }
        assignments[i] = cluster_index;
    }
}

void update_centroids(Point* points, int num_points, int* assignments, Point* centroids, int num_centroids) {
    int* cluster_sizes = (int*)calloc(num_centroids, sizeof(int));
    for (int i = 0; i < num_points; i++) {
        int cluster_index = assignments[i];
        cluster_sizes[cluster_index]++;
        for (int j = 0; j < DIMENSION; j++) {
            centroids[cluster_index].coords[j] += points[i].coords[j];
        }
    }
    for (int i = 0; i < num_centroids; i++) {
        if (cluster_sizes[i] > 0) {
            for (int j = 0; j < DIMENSION; j++) {
                centroids[i].coords[j] /= cluster_sizes[i];
            }
        }
    }
    free(cluster_sizes);
}

void kmeans_mpi(Point* points, int num_points, Point* centroids, int num_centroids, int* assignments, int rank, int size) {
    int iterations = 0;
    int local_num_points = num_points / size;
    Point* local_points = (Point*)malloc(local_num_points * sizeof(Point));
    MPI_Scatter(points, local_num_points * DIMENSION, MPI_DOUBLE, local_points, local_num_points * DIMENSION, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    while (iterations < MAX_ITERATIONS) {
        assign_clusters(local_points, local_num_points, centroids, num_centroids, assignments);

        MPI_Allgather(MPI_IN_PLACE, local_num_points, MPI_INT, assignments, local_num_points, MPI_INT, MPI_COMM_WORLD);

        update_centroids(local_points, local_num_points, assignments, centroids, num_centroids);

        MPI_Allreduce(MPI_IN_PLACE, centroids, num_centroids * DIMENSION, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);

        for (int i = 0; i < num_centroids; i++) {
            for (int j = 0; j < DIMENSION; j++) {
                centroids[i].coords[j] /= size;
            }
        }
        iterations++;
    }
    free(local_points);
}

int main(int argc, char* argv[]) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int num_points = 1000;
    int num_centroids = 4;
    Point* points;
    Point* centroids;
    int* assignments;

    if (rank == 0) {
        points = (Point*)malloc(num_points * sizeof(Point));
        for (int i = 0; i < num_points; i++) {
            for (int j = 0; j < DIMENSION; j++) {
                points[i].coords[j] = (double)rand() / RAND_MAX;
            }
        }

        centroids = (Point*)malloc(num_centroids * sizeof(Point));
        for (int i = 0; i < num_centroids; i++) {
            for (int j = 0; j < DIMENSION; j++) {
                centroids[i].coords[j] = points[i].coords[j];
            }
        }

        assignments = (int*)malloc(num_points * sizeof(int));
    }

    double start_time = MPI_Wtime();

    kmeans_mpi(points, num_points, centroids, num_centroids, assignments, rank, size);

    double end_time = MPI_Wtime();

    if (rank == 0) {
        printf("\nExecution Time: %.6f seconds\n\n", end_time - start_time);
    }

    if (rank == 0) {
        free(points);
        free(centroids);
        free(assignments);
    }

    MPI_Finalize();
    return 0;
}
